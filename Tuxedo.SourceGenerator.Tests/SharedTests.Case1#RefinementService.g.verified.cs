//HintName: RefinementService.g.cs
// <auto-generated/>
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;

namespace Tuxedo;

/// <summary>
/// Provides compile time support for running refinement predicates against compile time known values
/// </summary>
/// <remarks>
/// This is for compile time use and should not be used in application code
/// </remarks>
internal static class RefinementService
{
    private static string? TestAgainstTest1(object value)
    {
        return value is bool rt && !<global namespace>.Test1.TryParse(rt, out _, out var errorMessage) ? errorMessage : null;
    }

    private static string? TestAgainstTest2(object value)
    {
        return !<global namespace>.Test2.TryParse(((int a, int b))value, out _, out var errorMessage) ? errorMessage : null;
    }

    private static string? TestAgainstTest3<T>(object value)
    {
        return value is List<T> rt && !<global namespace>.Test3<T>.TryParse(rt, out _, out var errorMessage) ? errorMessage : null;
    }

    private static string? TestAgainstTest4<T>(object value) where T: struct
    {
        return value is List<T> rt && !<global namespace>.Test4<T>.TryParse(rt, out _, out var errorMessage) ? errorMessage : null;
    }

}
