using System.Collections.Immutable;
using Tuxedo.SourceGenerator.Extensions;

namespace Tuxedo.SourceGenerator;

public sealed partial class RefinementSourceGenerator
{
    private static string RenderRefinementService(
        ImmutableArray<RefinedTypeDetails> refinedTypeDetails
    )
    {
        return $$"""
            // <auto-generated/>
            #nullable enable

            namespace Tuxedo;

            /// <summary>
            /// Provides compile time support for running refinement predicates against compile time known values
            /// </summary>
            /// <remarks>
            /// This is for compile time use and should not be used in application code
            /// </remarks>
            internal static class RefinementService
            {
            {{string.Join("\n\n", refinedTypeDetails.Select(RenderTestMethod))}}
            }
            """;
    }

    private static string RenderTestMethod(RefinedTypeDetails model)
    {
        return $$"""
                private static string? TestAgainst{{model.RefinedType}}{{model.Generics}}(object value){{model.GenericConstraints.PrependIfNotNull(
                    "\n\t\t"
                )}}
                {
                    return {{(model.IsTuple
                        ? $"!{model.Namespace}.{model.RefinedType}{model.Generics}.TryParse(({model.RawType})value, out _, out var errorMessage) ? errorMessage : null"
                        : $"value is {model.RawType} rt && !{model.Namespace}.{model.RefinedType}{model.Generics}.TryParse(rt, out _, out var errorMessage) ? errorMessage : null")}};
                }
            """;
    }
}
