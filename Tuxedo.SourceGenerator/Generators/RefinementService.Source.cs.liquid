// <auto-generated/>
#nullable enable

{% foreach u in refinedTypeDetails.SelectMany(a => a.Usings)
                                  .Where(x => x.Name?.ToString().Equals("Tuxedo", StringComparison.Ordinal) is not true)
                                  .OrderBy(x => x.Name?.ToString(), StringComparer.Ordinal)
                                  .Select(x => x.ToString())
                                  .Distinct(StringComparer.Ordinal) -%}
{{ u }}
{% end -%}

namespace Tuxedo;

/// <summary>
/// Provides compile time support for running refinement predicates against compile time known values
/// </summary>
/// <remarks>
/// This is for compile time use and should not be used in application code
/// </remarks>
internal static class RefinementService
{
{%- foreach model in refinedTypeDetails -%}

    private static string? TestAgainst{{ model.RefinedType }}{{ model.GenericDetails?.Parameters }}(object value){% if model.GenericDetails?.Constraints is {} constraints %} {{constraints}}{% end %}
    {
{% if model.IsTuple -%}
        return !{{model.Namespace}}.{{model.RefinedType}}{{model.GenericDetails?.Parameters}}.TryParse(({{model.RawType}})value, out _, out var errorMessage) ? errorMessage : null;
{%- else -%}
        return value is {{model.RawType}} rt && !{{model.Namespace}}.{{model.RefinedType}}{{model.GenericDetails?.Parameters}}.TryParse(rt, out _, out var errorMessage) ? errorMessage : null;
{%- end %}
    }
{% end -%}

}
