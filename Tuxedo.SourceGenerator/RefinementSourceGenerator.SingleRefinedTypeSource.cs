using System.Diagnostics.CodeAnalysis;
using Tuxedo.SourceGenerator.Extensions;

namespace Tuxedo.SourceGenerator;

public sealed partial class RefinementSourceGenerator
{
    private abstract class SingleRefinedTypeModel
    {
        public string? Namespace { get; set; }
        public string? RawType { get; set; }

        public string? SafeRawTypeName()
        {
            if (RawType == null)
            {
                return null;
            }

            var fullTypeName = char.ToUpperInvariant(RawType[0]) + RawType.Substring(1);
            return fullTypeName.RemoveNamespace().RemoveGenerics();
        }

        public string? Predicate { get; set; }
        public string? AccessModifier { get; set; }
        public string? RefinedType { get; set; }
        public string? FailureMessage { get; set; }
        public string? Generics { get; set; }
        public string? GenericConstraints { get; set; }
    }

    [SuppressMessage(
        "Design",
        "MA0051:Method is too long",
        Justification = "template needs to be in one method"
    )]
    private static string RenderSingleRefinedType(SingleRefinedTypeModel model)
    {
        return $$"""
            // <auto-generated/>
            #nullable enable

            using System.Diagnostics.CodeAnalysis;

            namespace {{model.Namespace}};

            /// <summary>
            /// A refined {{model.RawType.EscapeXml()}} based on the {{model.Predicate.EscapeXml()}} refinement predicate
            /// </summary>
            {{model.AccessModifier}} readonly partial struct {{model.RefinedType}}{{model.Generics}}
            {{model.GenericConstraints}}
            {
                private readonly {{model.RawType}}? _value;

                /// <summary>
                /// The underlying refined value
                /// </summary>
                public {{model.RawType}} Value => _value ?? throw new InvalidOperationException("Do not use the default value, please use the Parse and TryParse methods to construct a {{model.RefinedType}}");
                
                private {{model.RefinedType}}({{model.RawType}} value)
                {
                    _value = value;
                }

                /// <summary>
                /// Implicit conversion from the refined to the raw value
                /// </summary>
                /// <param name="this">refined value</param>
                /// <returns>underlying raw value</returns>
                public static implicit operator {{model.RawType}}({{model.RefinedType}}{{model.Generics}} @this)
                {
                    return @this.Value;
                }

                /// <summary>
                /// Explicit conversion from the raw to the refined value
                /// </summary>
                /// <param name="value">raw value</param>
                /// <returns>refined value</returns>
                /// <exception cref="InvalidOperationException">if the refinement fails</exception>
                public static explicit operator {{model.RefinedType}}{{model.Generics}}({{model.RawType}} value)
                {
                    return Parse(value);
                }

                /// <summary>
                /// Try and refine the raw value
                /// </summary>
                /// <param name="value">raw value</param>
                /// <param name="refined">refined value</param>
                /// <param name="failureMessage">error message</param>
                /// <returns>true if refined, false otherwise</returns>
                public static bool TryParse(
                    {{model.RawType}} value,
                    out {{model.RefinedType}}{{model.Generics}} refined,
                    [NotNullWhen(false)] out string? failureMessage
                )
                {
                    if ({{model.Predicate}}{{model.Generics}}(value))
                    {
                        refined = new {{model.RefinedType}}{{model.Generics}}(value);
                        failureMessage = null;
                        return true;
                    }
                    
                    refined = default!;
                    failureMessage = ${{model.FailureMessage}};
                    return false;
                }

                /// <summary>
                /// Refines the value or throws
                /// </summary>
                /// <param name="value">raw value</param>
                /// <returns>refined value</returns>
                /// <exception cref="InvalidOperationException">if the refinement fails</exception>
                public static {{model.RefinedType}}{{model.Generics}} Parse({{model.RawType}} value)
                {
                    return TryParse(value, out var result, out var failureMessage) ? result : throw new InvalidOperationException(failureMessage);
                }
            }
            """;
    }
}
