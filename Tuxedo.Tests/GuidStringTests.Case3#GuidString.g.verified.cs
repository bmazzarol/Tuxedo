//HintName: GuidString.g.cs
// <auto-generated/>
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;

namespace <global namespace>;

/// <summary>
/// A refined string based on the Test.Guid refinement predicate which produces an alternative Guid value
/// </summary>
[Tuxedo.RefinedType]
public readonly partial struct GuidString : IEquatable<GuidString>
{
    private readonly string? _value;
   
    /// <summary>
    /// The underlying string
    /// </summary>
    public string Value => _value ?? throw new InvalidOperationException("Do not use the default value, please use the Parse and TryParse methods to construct a GuidString");

    /// <summary>
    /// Implicit conversion from the GuidString to a string
    /// </summary>
    /// <param name="this">the GuidString</param>
    /// <returns>underlying string</returns>
    public static implicit operator string(GuidString @this)
    {
        return @this.Value;
    }
        
    private readonly Guid? _altValue;
   
    /// <summary>
    /// The underlying Guid
    /// </summary>
    public Guid AltValue => _altValue ?? throw new InvalidOperationException("Do not use the default value, please use the Parse and TryParse methods to construct a GuidString");

    /// <summary>
    /// Implicit conversion from the GuidString to a Guid
    /// </summary>
    /// <param name="this">the GuidString</param>
    /// <returns>underlying Guid</returns>
    public static implicit operator Guid(GuidString @this)
    {
        return @this.AltValue;
    }

    private GuidString(string value, Guid altValue)
    {
        _value = value;
        _altValue = altValue;
    }

    /// <summary>
    /// Explicit conversion from a string to a GuidString
    /// </summary>
    /// <param name="value">raw string</param>
    /// <returns>refined GuidString</returns>
    /// <exception cref="ArgumentOutOfRangeException">if the Test.Guid refinement fails</exception>
    public static explicit operator GuidString(string value)
    {
        return Parse(value);
    }
    
    /// <summary>
    /// Refines the string or throws
    /// </summary>
    /// <param name="value">raw string</param>
    /// <returns>refined GuidString</returns>
    /// <exception cref="ArgumentOutOfRangeException">if the Test.Guid refinement fails</exception>
    public static GuidString Parse(string value)
    {
        return TryParse(value, out var result, out var failureMessage) ? result : throw new ArgumentOutOfRangeException(nameof(value), value, failureMessage);
    }

    /// <summary>
    /// Try and refine the string against the Test.Guid refinement producing a Guid
    /// </summary>
    /// <param name="value">raw string</param>
    /// <param name="refined">refined GuidString when true</param>
    /// <param name="failureMessage">error message when false</param>
    /// <returns>true if refined, false otherwise</returns>
    public static bool TryParse(
        string value,
        out GuidString refined,
        [NotNullWhen(false)] out string? failureMessage
    )
    {
        if (Test.Guid(value, out var altValue))
        {
            refined = new GuidString(value, altValue);
            failureMessage = null;
            return true;
        }
        
        refined = default!;
        failureMessage = $"The value must be a valid GUID, but was '{value}'";
        return false;
    }
    
    // <inheritdoc />
    public bool Equals(GuidString other)
    {
        return Nullable.Equals(_value, other._value) && Nullable.Equals(_altValue, other._altValue);
    }
    
    /// <inheritdoc />
    public override bool Equals(object? obj)
    {
        return obj is GuidString other && Equals(other);
    }
    
    /// <inheritdoc />
    public override int GetHashCode()
    {
        return HashCode.Combine(_value, _altValue);
    }
    
    /// <summary>
    /// Standard deconstruction to the underlying values
    /// </summary>
    /// <param name="value">raw string</param>
    /// <param name="altValue">alternative Guid</param>
    public void Deconstruct(out string value, out Guid altValue)
    {
         value = Value;
         altValue = AltValue;
    }
}