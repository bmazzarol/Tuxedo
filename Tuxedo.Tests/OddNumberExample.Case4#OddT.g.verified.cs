//HintName: OddT.g.cs
// <auto-generated/>
#nullable enable

using System.Diagnostics.CodeAnalysis;

namespace <global namespace>;

/// <summary>
/// A refined T based on the Test.Odd refinement predicate
/// </summary>
public readonly partial struct OddT<T>
    where T : System.Numerics.INumberBase<T>
{
    private readonly T? _value;

    /// <summary>
    /// The underlying refined value
    /// </summary>
    public T Value => _value ?? throw new InvalidOperationException("Do not use the default value, please use the Parse and TryParse methods to construct a OddT");
    
    private OddT(T value)
    {
        _value = value;
    }

    /// <summary>
    /// Implicit conversion from the refined to the raw value
    /// </summary>
    /// <param name="this">refined value</param>
    /// <returns>underlying raw value</returns>
    public static implicit operator T(OddT<T> @this)
    {
        return @this.Value;
    }

    /// <summary>
    /// Explicit conversion from the raw to the refined value
    /// </summary>
    /// <param name="value">raw value</param>
    /// <returns>refined value</returns>
    /// <exception cref="InvalidOperationException">if the refinement fails</exception>
    public static explicit operator OddT<T>(T value)
    {
        return Parse(value);
    }

    /// <summary>
    /// Try and refine the raw value
    /// </summary>
    /// <param name="value">raw value</param>
    /// <param name="refined">refined value</param>
    /// <param name="failureMessage">error message</param>
    /// <returns>true if refined, false otherwise</returns>
    public static bool TryParse(
        T value,
        out OddT<T> refined,
        [NotNullWhen(false)] out string? failureMessage
    )
    {
        if (Test.Odd<T>(value))
        {
            refined = new OddT<T>(value);
            failureMessage = null;
            return true;
        }
        
        refined = default!;
        failureMessage = $"The number must be an odd number, but was '{value}'";
        return false;
    }

    /// <summary>
    /// Refines the value or throws
    /// </summary>
    /// <param name="value">raw value</param>
    /// <returns>refined value</returns>
    /// <exception cref="InvalidOperationException">if the refinement fails</exception>
    public static OddT<T> Parse(T value)
    {
        return TryParse(value, out var result, out var failureMessage) ? result : throw new InvalidOperationException(failureMessage);
    }
}